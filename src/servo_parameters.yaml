servo:
################################ ROBOT SPECIFIC CONFIG #############################
  move_group_name: {
    type: string,
    description: "The name of the moveit move_group of your robot \
                  This parameter does not have a default value and \
                  must be passed to the node during launch time."
  }

  planning_frame: {
    type: string,
    description: "The name of moveit planning frame.\
                  This parameter does not have a default value and \
                  must be passed to the node during launch time."
  }

  ee_frame_name: {
    type: string,
    description: "The name of end-effector frame of your robot \
                  This parameter does not have a default value and \
                  must be passed to the node during launch time."
  }

  robot_link_command_frame: {
    type: string,
    description: "The frame of incoming command, change this to your own value when using a different robot \
                  This parameter does not have a default value and \
                  must be passed to the node during launch time."
  }

  monitored_planning_scene_topic: {
    type: string,
    default_value: "/planning_scene",
    description: "The name of the planning scene topic. \
                  planning_scene_monitor::PlanningSceneMonitor::DEFAULT_PLANNING_SCENE_TOPIC"
  }

################################ OUTPUTS #########################################
  status_topic: {
    type: string,
    default_value: "~/status",
    description: "The topic to which the status will be published"
  }

  command_out_topic: {
    type: string,
    default_value: "/panda_arm_controller/joint_trajectory",
    description: "The topic on which servo will publish the joint trajectory \
                  Change this to the topic your controller requires."
  }

  command_out_type: {
    type: string,
    default_value: "trajectory_msgs/JointTrajectory",
    description: "The type of command that servo will publish",
    validation: {
      one_of<>: [["trajectory_msgs/JointTrajectory", "std_msgs/Float64MultiArray"]]
    }
  }

################################ INPUTS  #############################
  cartesian_command_in_topic: {
    type: string,
    default_value: "~/delta_twist_cmds",
    description: "The topic on which servo will receive the twist commands"
  }

  joint_command_in_topic: {
    type: string,
    default_value: "~/delta_joint_cmds",
    description: "The topic on which servo will receive the joint jog commands"
  }

  command_in_type: {
    type: string,
    default_value: "unitless",
    description: "The unit of the incoming command.",
    validation: {
      one_of<>: [["unitless", "speed_units"]]
    }
  }

  joint_topic: {
    type: string,
    default_value: "/joint_states",
    description: "The topic on which joint states can be monitored"
  }

################################ GENERAL CONFIG #############################
  enable_parameter_update: {
    type: bool,
    default_value: false,
    description: "If true, continuous check for parameter update is enabled \
                  Currently only the following parameters are updated:
                  1. override_velocity_scaling_factor
                  2. robot_link_command_frame"
  }

  linear_scale: {
    type: double,
    default_value: 0.4,
    description: "Max linear velocity. Unit is [m/s]. Only used for Cartesian commands."
  }

  rotational_scale: {
    type: double,
    default_value: 0.8,
    description: "Max angular velocity. Unit is [rad/s]. Only used for Cartesian commands"
  }

  joint_scale: {
    type: double,
    default_value: 0.5,
    description: "Max joint angular/linear velocity. Only used for joint commands on joint_command_in_topic"
  }

  override_velocity_scaling_factor: {
    type: double,
    default_value: 0.0,
    description: "Scaling factor when servo overrides the velocity (eg: near singularities)"
  }

  publish_period: {
    type: double,
    default_value: 0.034,
    description: " 1 / (Nominal publish rate) [seconds]",
    validation: {
      gt<>: 0.0
    }
  }

  publish_joint_positions: {
    type: bool,
    default_value: true,
    description: "If true servo will publish joint positions in the output command"
  }

  publish_joint_velocities: {
    type: bool,
    default_value: true,
    description: "If true servo will publish joint velocities in the output command"
  }

  publish_joint_accelerations: {
    type: bool,
    default_value: false,
    description: "If true servo will publish joint accelerations in the output command"
  }

  smoothing_filter_plugin_name: {
    type: string,
    default_value: "online_signal_smoothing::ButterworthFilterPlugin",
    description: "The name of the smoothing plugin to be used"
  }

  is_primary_planning_scene_monitor: {
    type: bool,
    default_value: true,
    description: "If is_primary_planning_scene_monitor is set to true, \
                  the Servo server's PlanningScene advertises the /get_planning_scene service, \
                  which other nodes can use to get information about the planning environment. \
                  If a different node in your system will be publishing the planning scene, \
                  this should be set to false"
  }

  incoming_command_timeout: {
    type: double,
    default_value: 0.1,
    description: "Stop servoing if X seconds elapse without a new command. \
                  If 0, republish commands forever even if the robot is stationary. \
                  Otherwise, specify num. to publish. Important because ROS may drop \
                  some messages and we need the robot to halt reliably."
  }

  halt_all_joints_in_joint_mode: {
    type: bool,
    default_value: true,
    description: "Halt all joints in joint mode"
  }

  halt_all_joints_in_cartesian_mode: {
    type: bool,
    default_value: true,
    description: "Halt all joints in cartesian mode"
  }

  lower_singularity_threshold: {
    type: double,
    default_value: 17.0,
    description: "Start decelerating when the condition number hits this (close to singularity)",
    validation: {
      gt<>: 0.0
    }
  }

  hard_stop_singularity_threshold: {
    type: double,
    default_value: 30.0,
    description: "Stop when the condition number hits this",
    validation: {
      gt<>: 0.0,
    }
  }

  leaving_singularity_threshold_multiplier: {
    type: double,
    default_value: 2.0,
    description: "When 'lower_singularity_threshold' is triggered, \
                  but we are moving away from singularity, move this many times faster \
                  than if we were moving further into singularity",
    validation: {
      gt<>: 0.0
    }
  }

  joint_limit_margin: {
    type: double,
    default_value: 0.1,
    description: "Added as a buffer to joint limits [radians]. If moving quickly, make this larger.",
    validation: {
      gt<>: 0.0
    }
  }

  low_latency_mode: {
    type: bool,
    default_value: false,
    description: "If true , low latency mode is enabled."
  }

  check_collisions: {
    type: bool,
    default_value: true,
    description: "If true, servo will check for collision using the planning scene monitor."
  }

  collision_check_rate: {
    type: double,
    default_value: 10.0,
    description: "[Hz] Collision-checking can easily bog down a CPU if done too often. \
                  Collision checking begins slowing down when nearer than a specified distance.",
    validation: {
      gt_eq<>: 0.0
    }
  }

  self_collision_proximity_threshold: {
    type: double,
    default_value: 0.01,
    description: "Start decelerating when a self-collision is this far [m]",
    validation: {
      gt<>: 0.0
    }
  }

  scene_collision_proximity_threshold: {
    type: double,
    default_value: 0.02,
    description: "Start decelerating when a collision is this far [m]",
    validation: {
      gt<>: 0.0
    }
  }

############### POSE TRACKING PARAMETERS #########################

  windup_limit: {
    type: double,
    default_value: 0.05,
    description: "Maximum value of error integral for all PID controllers"
  }

  x_proportional_gain: {
    type: double,
    default_value: 1.5,
    description: "Proportional gain value for the controller in x direction"
  }

  y_proportional_gain: {
    type: double,
    default_value: 1.5,
    description: "Proportional gain value for the controller in y direction"
  }

  z_proportional_gain: {
    type: double,
    default_value: 1.5,
    description: "Proportional gain value for the controller in z direction"
  }

  x_integral_gain: {
    type: double,
    default_value: 0.0,
    description: "Integral gain value for the controller in x direction"
  }

  y_integral_gain: {
    type: double,
    default_value: 0.0,
    description: "Integral gain value for the controller in y direction"
  }

  z_integral_gain: {
    type: double,
    default_value: 0.0,
    description: "Integral gain value for the controller in z direction"
  }

  x_derivative_gain: {
    type: double,
    default_value: 0.0,
    description: "Derivative gain value for the controller in x direction"
  }

  y_derivative_gain: {
    type: double,
    default_value: 0.0,
    description: "Derivative gain value for the controller in y direction"
  }

  z_derivative_gain: {
    type: double,
    default_value: 0.0,
    description: "Derivative gain value for the controller in z direction"
  }

  angular_proportional_gain: {
    type: double,
    default_value: 0.5,
    description: "Proportional gain value for angular control"
  }

  angular_integral_gain: {
    type: double,
    default_value: 0.0,
    description: "Integral gain value for angular control"
  }

  angular_derivative_gain: {
    type: double,
    default_value: 0.0,
    description: "Derivative gain value for angular control"
  }
